// Code generated by "openapi-codegen"; DO NOT EDIT.
/*
 * OneLogin API
 *
 * This is an administrative API for OneLogin customers
 *
 * API version: 1.1.0-oas3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package models

import (
	"encoding/json"
)

// RolesResponse struct for RolesResponse
type RolesResponse struct {
	Status     *Status     `json:"status,omitempty"`
	Pagination *Pagination `json:"pagination,omitempty"`
	Data       *[]Role     `json:"data,omitempty"`
}

// NewRolesResponse instantiates a new RolesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRolesResponse() *RolesResponse {
	this := RolesResponse{}
	return &this
}

// NewRolesResponseWithDefaults instantiates a new RolesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRolesResponseWithDefaults() *RolesResponse {
	this := RolesResponse{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RolesResponse) GetStatus() Status {
	if o == nil || o.Status == nil {
		var ret Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesResponse) GetStatusOk() (*Status, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RolesResponse) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status and assigns it to the Status field.
func (o *RolesResponse) SetStatus(v Status) {
	o.Status = &v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *RolesResponse) GetPagination() Pagination {
	if o == nil || o.Pagination == nil {
		var ret Pagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesResponse) GetPaginationOk() (*Pagination, bool) {
	if o == nil || o.Pagination == nil {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *RolesResponse) HasPagination() bool {
	if o != nil && o.Pagination != nil {
		return true
	}

	return false
}

// SetPagination gets a reference to the given Pagination and assigns it to the Pagination field.
func (o *RolesResponse) SetPagination(v Pagination) {
	o.Pagination = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *RolesResponse) GetData() []Role {
	if o == nil || o.Data == nil {
		var ret []Role
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolesResponse) GetDataOk() (*[]Role, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *RolesResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []Role and assigns it to the Data field.
func (o *RolesResponse) SetData(v []Role) {
	o.Data = &v
}

func (o RolesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Pagination != nil {
		toSerialize["pagination"] = o.Pagination
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableRolesResponse struct {
	value *RolesResponse
	isSet bool
}

func (v NullableRolesResponse) Get() *RolesResponse {
	return v.value
}

func (v *NullableRolesResponse) Set(val *RolesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRolesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRolesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRolesResponse(val *RolesResponse) *NullableRolesResponse {
	return &NullableRolesResponse{value: val, isSet: true}
}

func (v NullableRolesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRolesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
