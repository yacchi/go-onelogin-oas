// Code generated by "openapi-codegen"; DO NOT EDIT.
/*
 * OneLogin API
 *
 * This is an administrative API for OneLogin customers
 *
 * API version: 1.1.0-oas3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package models

import (
	"encoding/json"
)

// InlineObject11 struct for InlineObject11
type InlineObject11 struct {
	// OTP code provided by the device or SMS message sent to user.
	OtpToken *int32 `json:"otp_token,omitempty"`
	// The state_token is returned after a successful request to Enroll a Factor or Activate a Factor. The state_token MUST be provided if the needs_trigger attribute from the proceeding calls is set to true.
	StateToken *string `json:"state_token,omitempty"`
}

// NewInlineObject11 instantiates a new InlineObject11 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject11() *InlineObject11 {
	this := InlineObject11{}
	return &this
}

// NewInlineObject11WithDefaults instantiates a new InlineObject11 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject11WithDefaults() *InlineObject11 {
	this := InlineObject11{}
	return &this
}

// GetOtpToken returns the OtpToken field value if set, zero value otherwise.
func (o *InlineObject11) GetOtpToken() int32 {
	if o == nil || o.OtpToken == nil {
		var ret int32
		return ret
	}
	return *o.OtpToken
}

// GetOtpTokenOk returns a tuple with the OtpToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject11) GetOtpTokenOk() (*int32, bool) {
	if o == nil || o.OtpToken == nil {
		return nil, false
	}
	return o.OtpToken, true
}

// HasOtpToken returns a boolean if a field has been set.
func (o *InlineObject11) HasOtpToken() bool {
	if o != nil && o.OtpToken != nil {
		return true
	}

	return false
}

// SetOtpToken gets a reference to the given int32 and assigns it to the OtpToken field.
func (o *InlineObject11) SetOtpToken(v int32) {
	o.OtpToken = &v
}

// GetStateToken returns the StateToken field value if set, zero value otherwise.
func (o *InlineObject11) GetStateToken() string {
	if o == nil || o.StateToken == nil {
		var ret string
		return ret
	}
	return *o.StateToken
}

// GetStateTokenOk returns a tuple with the StateToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject11) GetStateTokenOk() (*string, bool) {
	if o == nil || o.StateToken == nil {
		return nil, false
	}
	return o.StateToken, true
}

// HasStateToken returns a boolean if a field has been set.
func (o *InlineObject11) HasStateToken() bool {
	if o != nil && o.StateToken != nil {
		return true
	}

	return false
}

// SetStateToken gets a reference to the given string and assigns it to the StateToken field.
func (o *InlineObject11) SetStateToken(v string) {
	o.StateToken = &v
}

func (o InlineObject11) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OtpToken != nil {
		toSerialize["otp_token"] = o.OtpToken
	}
	if o.StateToken != nil {
		toSerialize["state_token"] = o.StateToken
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject11 struct {
	value *InlineObject11
	isSet bool
}

func (v NullableInlineObject11) Get() *InlineObject11 {
	return v.value
}

func (v *NullableInlineObject11) Set(val *InlineObject11) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject11) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject11) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject11(val *InlineObject11) *NullableInlineObject11 {
	return &NullableInlineObject11{value: val, isSet: true}
}

func (v NullableInlineObject11) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject11) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
