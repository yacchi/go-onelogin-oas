// Code generated by "openapi-codegen"; DO NOT EDIT.
/*
 * OneLogin API
 *
 * This is an administrative API for OneLogin customers
 *
 * API version: 1.1.0-oas3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package models

import (
	"encoding/json"
)

// CreatePrivilegeResponse struct for CreatePrivilegeResponse
type CreatePrivilegeResponse struct {
	Id *string `json:"id,omitempty"`
}

// NewCreatePrivilegeResponse instantiates a new CreatePrivilegeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePrivilegeResponse() *CreatePrivilegeResponse {
	this := CreatePrivilegeResponse{}
	return &this
}

// NewCreatePrivilegeResponseWithDefaults instantiates a new CreatePrivilegeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePrivilegeResponseWithDefaults() *CreatePrivilegeResponse {
	this := CreatePrivilegeResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CreatePrivilegeResponse) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePrivilegeResponse) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CreatePrivilegeResponse) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CreatePrivilegeResponse) SetId(v string) {
	o.Id = &v
}

func (o CreatePrivilegeResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableCreatePrivilegeResponse struct {
	value *CreatePrivilegeResponse
	isSet bool
}

func (v NullableCreatePrivilegeResponse) Get() *CreatePrivilegeResponse {
	return v.value
}

func (v *NullableCreatePrivilegeResponse) Set(val *CreatePrivilegeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePrivilegeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePrivilegeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePrivilegeResponse(val *CreatePrivilegeResponse) *NullableCreatePrivilegeResponse {
	return &NullableCreatePrivilegeResponse{value: val, isSet: true}
}

func (v NullableCreatePrivilegeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePrivilegeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
