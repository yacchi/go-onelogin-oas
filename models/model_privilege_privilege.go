// Code generated by "openapi-codegen"; DO NOT EDIT.
/*
 * OneLogin API
 *
 * This is an administrative API for OneLogin customers
 *
 * API version: 1.1.0-oas3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package models

import (
	"encoding/json"
	"github.com/yacchi/go-onelogin-oas/models"
)

// PrivilegePrivilege struct for PrivilegePrivilege
type PrivilegePrivilege struct {
	// Version can be anything. Recommended to be Date/Time format
	Version string `json:"Version"`
	Statement []Statement `json:"Statement"`
}

// NewPrivilegePrivilege instantiates a new PrivilegePrivilege object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivilegePrivilege(version string, statement []Statement, ) *PrivilegePrivilege {
	this := PrivilegePrivilege{}
	this.Version = version
	this.Statement = statement
	return &this
}

// NewPrivilegePrivilegeWithDefaults instantiates a new PrivilegePrivilege object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivilegePrivilegeWithDefaults() *PrivilegePrivilege {
	this := PrivilegePrivilege{}
	return &this
}

// GetVersion returns the Version field value
func (o *PrivilegePrivilege) GetVersion() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *PrivilegePrivilege) GetVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *PrivilegePrivilege) SetVersion(v string) {
	o.Version = v
}

// GetStatement returns the Statement field value
func (o *PrivilegePrivilege) GetStatement() []Statement {
	if o == nil  {
		var ret []Statement
		return ret
	}

	return o.Statement
}

// GetStatementOk returns a tuple with the Statement field value
// and a boolean to check if the value has been set.
func (o *PrivilegePrivilege) GetStatementOk() (*[]Statement, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Statement, true
}

// SetStatement sets field value
func (o *PrivilegePrivilege) SetStatement(v []Statement) {
	o.Statement = v
}

func (o PrivilegePrivilege) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["Version"] = o.Version
	}
	if true {
		toSerialize["Statement"] = o.Statement
	}
	return json.Marshal(toSerialize)
}

type NullablePrivilegePrivilege struct {
	value *PrivilegePrivilege
	isSet bool
}

func (v NullablePrivilegePrivilege) Get() *PrivilegePrivilege {
	return v.value
}

func (v *NullablePrivilegePrivilege) Set(val *PrivilegePrivilege) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivilegePrivilege) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivilegePrivilege) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivilegePrivilege(val *PrivilegePrivilege) *NullablePrivilegePrivilege {
	return &NullablePrivilegePrivilege{value: val, isSet: true}
}

func (v NullablePrivilegePrivilege) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivilegePrivilege) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
