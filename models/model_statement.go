// Code generated by "openapi-codegen"; DO NOT EDIT.
/*
 * OneLogin API
 *
 * This is an administrative API for OneLogin customers
 *
 * API version: 1.1.0-oas3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package models

import (
	"encoding/json"
	"github.com/yacchi/go-onelogin-oas/models"
)

// Statement struct for Statement
type Statement struct {
	Effect string `json:"Effect"`
	Action []Action `json:"Action"`
	Scope []string `json:"Scope"`
}

// NewStatement instantiates a new Statement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatement(effect string, action []Action, scope []string, ) *Statement {
	this := Statement{}
	this.Effect = effect
	this.Action = action
	this.Scope = scope
	return &this
}

// NewStatementWithDefaults instantiates a new Statement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementWithDefaults() *Statement {
	this := Statement{}
	return &this
}

// GetEffect returns the Effect field value
func (o *Statement) GetEffect() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Effect
}

// GetEffectOk returns a tuple with the Effect field value
// and a boolean to check if the value has been set.
func (o *Statement) GetEffectOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Effect, true
}

// SetEffect sets field value
func (o *Statement) SetEffect(v string) {
	o.Effect = v
}

// GetAction returns the Action field value
func (o *Statement) GetAction() []Action {
	if o == nil  {
		var ret []Action
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *Statement) GetActionOk() (*[]Action, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *Statement) SetAction(v []Action) {
	o.Action = v
}

// GetScope returns the Scope field value
func (o *Statement) GetScope() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *Statement) GetScopeOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *Statement) SetScope(v []string) {
	o.Scope = v
}

func (o Statement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["Effect"] = o.Effect
	}
	if true {
		toSerialize["Action"] = o.Action
	}
	if true {
		toSerialize["Scope"] = o.Scope
	}
	return json.Marshal(toSerialize)
}

type NullableStatement struct {
	value *Statement
	isSet bool
}

func (v NullableStatement) Get() *Statement {
	return v.value
}

func (v *NullableStatement) Set(val *Statement) {
	v.value = val
	v.isSet = true
}

func (v NullableStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatement(val *Statement) *NullableStatement {
	return &NullableStatement{value: val, isSet: true}
}

func (v NullableStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
