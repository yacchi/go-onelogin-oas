// Code generated by "openapi-codegen"; DO NOT EDIT.
/*
 * OneLogin API
 *
 * This is an administrative API for OneLogin customers
 *
 * API version: 1.1.0-oas3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package models

import (
	"encoding/json"
)

// UserApp struct for UserApp
type UserApp struct {
	// ID of the app that can be accessed by the user.
	Id *int32 `json:"id,omitempty"`
	// Constant name for the Event Type
	Name *string `json:"name,omitempty"`
	// Template for the Event description
	Icon *string `json:"icon,omitempty"`
	// Indicates whether a username and password has been stored on the login for the app and user. Valid values are: - 0 (no) - 1 (yes)
	Provisioned *int32 `json:"provisioned,omitempty"`
	// Indicates whether the app requires the OneLogin browser extension to login. Valid values are: - true: The app requires the OneLogin browser extension. - false: The app does not require the OneLogin browser extension.
	Extension *bool `json:"extension,omitempty"`
	// Template for the Event description
	LoginId *string `json:"login_id,omitempty"`
	// Indicates whether the app is a user’s personal app. Valid values are: - true: The app is a user’s personal app. - false: The app is not a user’s personal app.
	Personal *bool `json:"personal,omitempty"`
}

// NewUserApp instantiates a new UserApp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserApp() *UserApp {
	this := UserApp{}
	return &this
}

// NewUserAppWithDefaults instantiates a new UserApp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAppWithDefaults() *UserApp {
	this := UserApp{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserApp) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserApp) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserApp) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *UserApp) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserApp) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserApp) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserApp) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserApp) SetName(v string) {
	o.Name = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *UserApp) GetIcon() string {
	if o == nil || o.Icon == nil {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserApp) GetIconOk() (*string, bool) {
	if o == nil || o.Icon == nil {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *UserApp) HasIcon() bool {
	if o != nil && o.Icon != nil {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *UserApp) SetIcon(v string) {
	o.Icon = &v
}

// GetProvisioned returns the Provisioned field value if set, zero value otherwise.
func (o *UserApp) GetProvisioned() int32 {
	if o == nil || o.Provisioned == nil {
		var ret int32
		return ret
	}
	return *o.Provisioned
}

// GetProvisionedOk returns a tuple with the Provisioned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserApp) GetProvisionedOk() (*int32, bool) {
	if o == nil || o.Provisioned == nil {
		return nil, false
	}
	return o.Provisioned, true
}

// HasProvisioned returns a boolean if a field has been set.
func (o *UserApp) HasProvisioned() bool {
	if o != nil && o.Provisioned != nil {
		return true
	}

	return false
}

// SetProvisioned gets a reference to the given int32 and assigns it to the Provisioned field.
func (o *UserApp) SetProvisioned(v int32) {
	o.Provisioned = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *UserApp) GetExtension() bool {
	if o == nil || o.Extension == nil {
		var ret bool
		return ret
	}
	return *o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserApp) GetExtensionOk() (*bool, bool) {
	if o == nil || o.Extension == nil {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *UserApp) HasExtension() bool {
	if o != nil && o.Extension != nil {
		return true
	}

	return false
}

// SetExtension gets a reference to the given bool and assigns it to the Extension field.
func (o *UserApp) SetExtension(v bool) {
	o.Extension = &v
}

// GetLoginId returns the LoginId field value if set, zero value otherwise.
func (o *UserApp) GetLoginId() string {
	if o == nil || o.LoginId == nil {
		var ret string
		return ret
	}
	return *o.LoginId
}

// GetLoginIdOk returns a tuple with the LoginId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserApp) GetLoginIdOk() (*string, bool) {
	if o == nil || o.LoginId == nil {
		return nil, false
	}
	return o.LoginId, true
}

// HasLoginId returns a boolean if a field has been set.
func (o *UserApp) HasLoginId() bool {
	if o != nil && o.LoginId != nil {
		return true
	}

	return false
}

// SetLoginId gets a reference to the given string and assigns it to the LoginId field.
func (o *UserApp) SetLoginId(v string) {
	o.LoginId = &v
}

// GetPersonal returns the Personal field value if set, zero value otherwise.
func (o *UserApp) GetPersonal() bool {
	if o == nil || o.Personal == nil {
		var ret bool
		return ret
	}
	return *o.Personal
}

// GetPersonalOk returns a tuple with the Personal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserApp) GetPersonalOk() (*bool, bool) {
	if o == nil || o.Personal == nil {
		return nil, false
	}
	return o.Personal, true
}

// HasPersonal returns a boolean if a field has been set.
func (o *UserApp) HasPersonal() bool {
	if o != nil && o.Personal != nil {
		return true
	}

	return false
}

// SetPersonal gets a reference to the given bool and assigns it to the Personal field.
func (o *UserApp) SetPersonal(v bool) {
	o.Personal = &v
}

func (o UserApp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Icon != nil {
		toSerialize["icon"] = o.Icon
	}
	if o.Provisioned != nil {
		toSerialize["provisioned"] = o.Provisioned
	}
	if o.Extension != nil {
		toSerialize["extension"] = o.Extension
	}
	if o.LoginId != nil {
		toSerialize["login_id"] = o.LoginId
	}
	if o.Personal != nil {
		toSerialize["personal"] = o.Personal
	}
	return json.Marshal(toSerialize)
}

type NullableUserApp struct {
	value *UserApp
	isSet bool
}

func (v NullableUserApp) Get() *UserApp {
	return v.value
}

func (v *NullableUserApp) Set(val *UserApp) {
	v.value = val
	v.isSet = true
}

func (v NullableUserApp) IsSet() bool {
	return v.isSet
}

func (v *NullableUserApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserApp(val *UserApp) *NullableUserApp {
	return &NullableUserApp{value: val, isSet: true}
}

func (v NullableUserApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
