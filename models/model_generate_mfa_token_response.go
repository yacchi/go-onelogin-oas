// Code generated by "openapi-codegen"; DO NOT EDIT.
/*
 * OneLogin API
 *
 * This is an administrative API for OneLogin customers
 *
 * API version: 1.1.0-oas3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package models

import (
	"encoding/json"
	"time"
)

// GenerateMfaTokenResponse struct for GenerateMfaTokenResponse
type GenerateMfaTokenResponse struct {
	Reusable  *bool      `json:"reusable,omitempty"`
	MfaToken  *string    `json:"mfa_token,omitempty"`
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
}

// NewGenerateMfaTokenResponse instantiates a new GenerateMfaTokenResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenerateMfaTokenResponse() *GenerateMfaTokenResponse {
	this := GenerateMfaTokenResponse{}
	return &this
}

// NewGenerateMfaTokenResponseWithDefaults instantiates a new GenerateMfaTokenResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenerateMfaTokenResponseWithDefaults() *GenerateMfaTokenResponse {
	this := GenerateMfaTokenResponse{}
	return &this
}

// GetReusable returns the Reusable field value if set, zero value otherwise.
func (o *GenerateMfaTokenResponse) GetReusable() bool {
	if o == nil || o.Reusable == nil {
		var ret bool
		return ret
	}
	return *o.Reusable
}

// GetReusableOk returns a tuple with the Reusable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateMfaTokenResponse) GetReusableOk() (*bool, bool) {
	if o == nil || o.Reusable == nil {
		return nil, false
	}
	return o.Reusable, true
}

// HasReusable returns a boolean if a field has been set.
func (o *GenerateMfaTokenResponse) HasReusable() bool {
	if o != nil && o.Reusable != nil {
		return true
	}

	return false
}

// SetReusable gets a reference to the given bool and assigns it to the Reusable field.
func (o *GenerateMfaTokenResponse) SetReusable(v bool) {
	o.Reusable = &v
}

// GetMfaToken returns the MfaToken field value if set, zero value otherwise.
func (o *GenerateMfaTokenResponse) GetMfaToken() string {
	if o == nil || o.MfaToken == nil {
		var ret string
		return ret
	}
	return *o.MfaToken
}

// GetMfaTokenOk returns a tuple with the MfaToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateMfaTokenResponse) GetMfaTokenOk() (*string, bool) {
	if o == nil || o.MfaToken == nil {
		return nil, false
	}
	return o.MfaToken, true
}

// HasMfaToken returns a boolean if a field has been set.
func (o *GenerateMfaTokenResponse) HasMfaToken() bool {
	if o != nil && o.MfaToken != nil {
		return true
	}

	return false
}

// SetMfaToken gets a reference to the given string and assigns it to the MfaToken field.
func (o *GenerateMfaTokenResponse) SetMfaToken(v string) {
	o.MfaToken = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *GenerateMfaTokenResponse) GetExpiresAt() time.Time {
	if o == nil || o.ExpiresAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateMfaTokenResponse) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || o.ExpiresAt == nil {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *GenerateMfaTokenResponse) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt != nil {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *GenerateMfaTokenResponse) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

func (o GenerateMfaTokenResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Reusable != nil {
		toSerialize["reusable"] = o.Reusable
	}
	if o.MfaToken != nil {
		toSerialize["mfa_token"] = o.MfaToken
	}
	if o.ExpiresAt != nil {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	return json.Marshal(toSerialize)
}

type NullableGenerateMfaTokenResponse struct {
	value *GenerateMfaTokenResponse
	isSet bool
}

func (v NullableGenerateMfaTokenResponse) Get() *GenerateMfaTokenResponse {
	return v.value
}

func (v *NullableGenerateMfaTokenResponse) Set(val *GenerateMfaTokenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGenerateMfaTokenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerateMfaTokenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerateMfaTokenResponse(val *GenerateMfaTokenResponse) *NullableGenerateMfaTokenResponse {
	return &NullableGenerateMfaTokenResponse{value: val, isSet: true}
}

func (v NullableGenerateMfaTokenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerateMfaTokenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
